{"version":3,"file":"static/js/99.a082fa91.chunk.js","mappings":"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","sources":["utilities/prQueries/QUERY_REVIEW_REQUESTED_PRS.ts","components/prTabs/tabs/ReviewRequestedPRs.tsx","utilities/filterUtilities/filters/filterReviewRequestedPRsByMembers.ts","components/prTabs/PRTabsMenu.tsx"],"sourcesContent":["import { DocumentNode, gql } from \"@apollo/client\";\n\nexport const QUERY_REVIEW_REQUESTED_PRS: DocumentNode = gql`\n  query ReviewRequested($user: String!) {\n    user(username: $user) {\n      reviewRequestedMergeRequests(state: opened) {\n        nodes {\n          id\n          author {\n            username\n            name\n          }\n          title\n          webUrl\n          reviewers {\n            nodes {\n              username\n              name\n            }\n          }\n          assignees {\n            nodes {\n              name\n              username\n            }\n          }\n          labels {\n            nodes {\n              title\n            }\n          }\n          draft\n          conflicts\n          approvedBy {\n            nodes {\n              name\n              username\n            }\n          }\n          project {\n            fullPath\n          }\n          iid\n          autoMergeEnabled\n          approved\n          headPipeline {\n            status\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useContext, useState, Suspense } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { Loading } from \"../../Loading\";\nimport { validateGitLabToken } from \"../../../utilities/tokenValidationUtilities/validateGitLabToken\";\nimport { filterReviewRequestedPRsByMembers } from \"../../../utilities/filterUtilities/filters/filterReviewRequestedPRsByMembers\";\nimport { QUERY_REVIEW_REQUESTED_PRS } from \"../../../utilities/prQueries/QUERY_REVIEW_REQUESTED_PRS\";\nimport { TAB_TYPE } from \"../../../utilities/constants\";\nimport {\n  MembersContext,\n  TokensInCacheContext,\n} from \"../../../contexts/Context\";\n\nexport const ReviewRequestedPRs = () => {\n  const { user, members, reload } = useContext(MembersContext);\n  const { setGitInCache } = useContext(TokensInCacheContext);\n  const [networkError, setNetworkError] = useState<boolean>(false);\n\n  (async () => {\n    try {\n      const response = await validateGitLabToken();\n      console.log(\"GitLab PAT validated: \", response);\n    } catch (error) {\n      console.log(\"GitLab PAT validation failed: \", error);\n      if (String(error).startsWith(\"TypeError: Failed to fetch\")) {\n        if (networkError === false) {\n          setNetworkError(true);\n        }\n      } else {\n        setGitInCache(false);\n      }\n    }\n  })();\n\n  const { data, error, loading } = useQuery(QUERY_REVIEW_REQUESTED_PRS, {\n    variables: {\n      user: user,\n    },\n    fetchPolicy: \"network-only\",\n    nextFetchPolicy: \"cache-and-network\",\n  });\n\n  const Error = React.lazy(() =>\n    import(\"../../Error\").then((module) => ({\n      default: module.Error,\n    }))\n  );\n  if (networkError) {\n    return (\n      <Suspense fallback={<Loading loadingText=\"\" />}>\n        <Error\n          errorMessage=\"Failed to fetch: offline or your network doesn't have access to GitLab\"\n          reload={reload}\n        />\n      </Suspense>\n    );\n  }\n\n  if (loading) {\n    return <Loading loadingText=\"Fetching PR's from GitLab...\" />;\n  }\n\n  if (error) {\n    return (\n      <Suspense fallback={<Loading loadingText=\"\" />}>\n        <Error errorMessage={String(error)} reload={reload} />\n      </Suspense>\n    );\n  }\n\n  if (data === undefined) {\n    setGitInCache(false);\n    return null;\n  } else {\n    const memberUsernames = members.map((member) => member.username);\n\n    const prsFilteredByMembers = filterReviewRequestedPRsByMembers(\n      data.user.reviewRequestedMergeRequests.nodes,\n      memberUsernames\n    );\n\n    const AddData = React.lazy(() =>\n      import(\"./AddData\").then((module) => ({\n        default: module.AddData,\n      }))\n    );\n\n    return (\n      <Suspense\n        fallback={<Loading loadingText=\"Loading Review requested PRs tab...\" />}\n      >\n        <AddData\n          data={prsFilteredByMembers}\n          tabType={TAB_TYPE.reviewRequested}\n        />\n      </Suspense>\n    );\n  }\n};\n","import { PR } from \"../../constants\";\n\nexport const filterReviewRequestedPRsByMembers = (\n  prs: PR[],\n  memberUsernames: string[]\n) => {\n  return prs.filter((pr) => memberUsernames.includes(pr.author!.username));\n};\n","import React, { useState, Suspense } from \"react\";\nimport { Stack } from \"@fluentui/react\";\nimport {\n  Tab,\n  TabList,\n  SelectTabEvent,\n  SelectTabData,\n  TabValue,\n} from \"@fluentui/react-components\";\nimport { ReviewRequestedPRs } from \"./tabs/ReviewRequestedPRs\";\nimport { TAB_TYPE } from \"../../utilities/constants\";\nimport { Loading } from \"../Loading\";\n\nexport const PRTabsMenu = () => {\n  const [selectedValue, setSelectedValue] = useState<TabValue>(\n    TAB_TYPE.reviewRequested\n  );\n\n  const onTabSelect = (event: SelectTabEvent, data: SelectTabData): void => {\n    setSelectedValue(data.value);\n  };\n\n  const GroupPRs = React.lazy(() =>\n    import(\"./tabs/GroupPRs\").then((module) => ({ default: module.GroupPRs }))\n  );\n\n  const GroupsMergedPRs = React.lazy(() =>\n    import(\"./tabs/GroupsMergedPRs\").then((module) => ({\n      default: module.GroupsMergedPRs,\n    }))\n  );\n\n  const MyPRs = React.lazy(() =>\n    import(\"./tabs/MyPRs\").then((module) => ({\n      default: module.MyPRs,\n    }))\n  );\n\n  return (\n    <Stack>\n      <TabList\n        selectedValue={selectedValue}\n        defaultSelectedValue={TAB_TYPE.reviewRequested}\n        onTabSelect={onTabSelect}\n      >\n        <Tab value={TAB_TYPE.reviewRequested}>{TAB_TYPE.reviewRequested}</Tab>\n        <Tab value={TAB_TYPE.groupPRs}>{TAB_TYPE.groupPRs}</Tab>\n        <Tab value={TAB_TYPE.myPRs}>{TAB_TYPE.myPRs}</Tab>\n        <Tab value={TAB_TYPE.groupsMergedPRs}>{TAB_TYPE.groupsMergedPRs}</Tab>\n      </TabList>\n      {selectedValue === TAB_TYPE.reviewRequested && <ReviewRequestedPRs />}\n      {selectedValue === TAB_TYPE.groupPRs && (\n        <Suspense\n          fallback={<Loading loadingText=\"Loading Group PR's tab...\" />}\n        >\n          <GroupPRs />\n        </Suspense>\n      )}\n      {selectedValue === TAB_TYPE.myPRs && (\n        <Suspense fallback={<Loading loadingText=\"Loading My PR's tab...\" />}>\n          <MyPRs />\n        </Suspense>\n      )}\n      {selectedValue === TAB_TYPE.groupsMergedPRs && (\n        <Suspense\n          fallback={<Loading loadingText=\"Loading Groups merged PR's tab...\" />}\n        >\n          <GroupsMergedPRs />\n        </Suspense>\n      )}\n    </Stack>\n  );\n};\n"],"names":["QUERY_REVIEW_REQUESTED_PRS","gql","_templateObject","_taggedTemplateLiteral","ReviewRequestedPRs","user","members","reload","useContext","MembersContext","setGitInCache","TokensInCacheContext","networkError","setNetworkError","useState","response","validateGitLabToken","console","log","error","String","startsWith","data","loading","useQuery","variables","fetchPolicy","nextFetchPolicy","Error","React","then","module","default","_jsx","Suspense","fallback","Loading","loadingText","children","errorMessage","undefined","memberUsernames","map","member","username","prsFilteredByMembers","filterReviewRequestedPRsByMembers","prs","filter","pr","includes","author","reviewRequestedMergeRequests","nodes","AddData","tabType","TAB_TYPE","reviewRequested","PRTabsMenu","selectedValue","setSelectedValue","GroupPRs","GroupsMergedPRs","MyPRs","_jsxs","Stack","TabList","defaultSelectedValue","onTabSelect","event","value","Tab","groupPRs","myPRs","groupsMergedPRs"],"sourceRoot":""}
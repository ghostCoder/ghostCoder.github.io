{"version":3,"file":"static/js/308.161c9a00.chunk.js","mappings":"0NAEO,MAAMA,GAA6BC,E,QAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,u2B,iCCWtC,MAAMC,EAAQA,KACnB,MAAM,KAAEC,EAAI,OAAEC,IAAWC,EAAAA,EAAAA,YAAWC,EAAAA,KAC9B,cAAEC,IAAkBF,EAAAA,EAAAA,YAAWG,EAAAA,KAC9BC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAkB,GAE1D,WACE,IACE,MAAMC,QAAiBC,EAAAA,EAAAA,KACvBC,QAAQC,IAAI,yBAA0BH,EACxC,CAAE,MAAOI,GACPF,QAAQC,IAAI,iCAAkCC,GAC1CC,OAAOD,GAAOE,WAAW,+BACN,IAAjBT,GACFC,GAAgB,GAGlBH,GAAe,EAEnB,CACD,EAdD,GAgBA,MAAM,KAAEY,EAAI,MAAEH,EAAK,QAAEI,IAAYC,EAAAA,EAAAA,GAASvB,EAAc,CACtDwB,UAAW,CAAEnB,KAAMA,GACnBoB,YAAa,eACbC,gBAAiB,sBAGnB,OAAIf,GAEAgB,EAAAA,EAAAA,KAACC,EAAAA,MAAK,CACJC,aAAa,yEACbvB,OAAQA,IAKVgB,GACKK,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAACC,YAAY,kCAI1Bb,IACDU,EAAAA,MAAoBT,OAAOD,IAG9BF,QAAQC,IAAI,sBAAuBI,QAEtBW,IAATX,GACFZ,GAAc,GACP,OAGLkB,EAAAA,EAAAA,KAACM,EAAAA,EAAO,CACNZ,KAAMA,EAAKhB,KAAK6B,sBAAsBC,MACtCC,QAASC,EAAAA,GAASC,QAGxB,C","sources":["utilities/prQueries/QUERY_MY_PRS.ts","components/prTabs/tabs/MyPRs.tsx"],"sourcesContent":["import { DocumentNode, gql } from \"@apollo/client\";\n\nexport const QUERY_MY_PRS: DocumentNode = gql`\n  query MyPRs($user: String!) {\n    user(username: $user) {\n      authoredMergeRequests(state: opened) {\n        nodes {\n          id\n          title\n          webUrl\n          reviewers {\n            nodes {\n              username\n              name\n            }\n          }\n          assignees {\n            nodes {\n              name\n              username\n            }\n          }\n          labels {\n            nodes {\n              title\n            }\n          }\n          draft\n          conflicts\n          approvedBy {\n            nodes {\n              name\n              username\n            }\n          }\n          project {\n            fullPath\n          }\n          iid\n          autoMergeEnabled\n          approved\n          headPipeline {\n            status\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useState, useContext } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { Loading } from \"../../Loading\";\nimport { Error } from \"../../Error\";\nimport { AddData } from \"./AddData\";\nimport { validateGitLabToken } from \"../../../utilities/tokenValidationUtilities/validateGitLabToken\";\nimport { QUERY_MY_PRS } from \"../../../utilities/prQueries/QUERY_MY_PRS\";\nimport { TAB_TYPE } from \"../../../utilities/constants\";\nimport {\n  MembersContext,\n  TokensInCacheContext,\n} from \"../../../contexts/Context\";\n\nexport const MyPRs = () => {\n  const { user, reload } = useContext(MembersContext);\n  const { setGitInCache } = useContext(TokensInCacheContext);\n  const [networkError, setNetworkError] = useState<boolean>(false);\n\n  (async () => {\n    try {\n      const response = await validateGitLabToken();\n      console.log(\"GitLab PAT validated: \", response);\n    } catch (error) {\n      console.log(\"GitLab PAT validation failed: \", error);\n      if (String(error).startsWith(\"TypeError: Failed to fetch\")) {\n        if (networkError === false) {\n          setNetworkError(true);\n        }\n      } else {\n        setGitInCache!(false);\n      }\n    }\n  })();\n\n  const { data, error, loading } = useQuery(QUERY_MY_PRS, {\n    variables: { user: user! },\n    fetchPolicy: \"network-only\",\n    nextFetchPolicy: \"cache-and-network\",\n  });\n\n  if (networkError) {\n    return (\n      <Error\n        errorMessage=\"Failed to fetch: offline or your network doesn't have access to GitLab\"\n        reload={reload!}\n      />\n    );\n  }\n\n  if (loading) {\n    return <Loading loadingText=\"Fetching PR's from GitLab...\" />;\n  }\n\n  // ADD ERROR SCREEN HERE\n  if (error) {\n    <Error errorMessage={String(error)} reload={reload!} />;\n  }\n\n  console.log(\"Data from My Pr's: \", data);\n\n  if (data === undefined) {\n    setGitInCache(false);\n    return null;\n  } else {\n    return (\n      <AddData\n        data={data.user.authoredMergeRequests.nodes}\n        tabType={TAB_TYPE.myPRs}\n      />\n    );\n  }\n};\n"],"names":["QUERY_MY_PRS","gql","_templateObject","_taggedTemplateLiteral","MyPRs","user","reload","useContext","MembersContext","setGitInCache","TokensInCacheContext","networkError","setNetworkError","useState","response","validateGitLabToken","console","log","error","String","startsWith","data","loading","useQuery","variables","fetchPolicy","nextFetchPolicy","_jsx","Error","errorMessage","Loading","loadingText","undefined","AddData","authoredMergeRequests","nodes","tabType","TAB_TYPE","myPRs"],"sourceRoot":""}
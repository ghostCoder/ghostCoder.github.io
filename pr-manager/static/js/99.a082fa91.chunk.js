"use strict";(self.webpackChunkTeams_PR_Manager=self.webpackChunkTeams_PR_Manager||[]).push([[99],{9099:(e,n,s)=>{s.r(n),s.d(n,{PRTabsMenu:()=>f});var a=s(2791),t=s(9132),r=s(9395),l=s(5177),d=s(3173),i=s(9313),o=s(5792);var u,g=s(168);const c=(0,s(9383).Ps)(u||(u=(0,g.Z)(["\n  query ReviewRequested($user: String!) {\n    user(username: $user) {\n      reviewRequestedMergeRequests(state: opened) {\n        nodes {\n          id\n          author {\n            username\n            name\n          }\n          title\n          webUrl\n          reviewers {\n            nodes {\n              username\n              name\n            }\n          }\n          assignees {\n            nodes {\n              name\n              username\n            }\n          }\n          labels {\n            nodes {\n              title\n            }\n          }\n          draft\n          conflicts\n          approvedBy {\n            nodes {\n              name\n              username\n            }\n          }\n          project {\n            fullPath\n          }\n          iid\n          autoMergeEnabled\n          approved\n          headPipeline {\n            status\n          }\n        }\n      }\n    }\n  }\n"])));var h=s(6147),x=s(7974),R=s(184);const b=()=>{const{user:e,members:n,reload:t}=(0,a.useContext)(x.Kz),{setGitInCache:r}=(0,a.useContext)(x.zm),[l,u]=(0,a.useState)(!1);(async()=>{try{const e=await(0,o.a)();console.log("GitLab PAT validated: ",e)}catch(b){console.log("GitLab PAT validation failed: ",b),String(b).startsWith("TypeError: Failed to fetch")?!1===l&&u(!0):r(!1)}})();const{data:g,error:b,loading:f}=(0,d.a)(c,{variables:{user:e},fetchPolicy:"network-only",nextFetchPolicy:"cache-and-network"}),p=a.lazy((()=>Promise.resolve().then(s.bind(s,7905)).then((e=>({default:e.Error})))));if(l)return(0,R.jsx)(a.Suspense,{fallback:(0,R.jsx)(i.g,{loadingText:""}),children:(0,R.jsx)(p,{errorMessage:"Failed to fetch: offline or your network doesn't have access to GitLab",reload:t})});if(f)return(0,R.jsx)(i.g,{loadingText:"Fetching PR's from GitLab..."});if(b)return(0,R.jsx)(a.Suspense,{fallback:(0,R.jsx)(i.g,{loadingText:""}),children:(0,R.jsx)(p,{errorMessage:String(b),reload:t})});if(void 0===g)return r(!1),null;{const e=n.map((e=>e.username)),t=((e,n)=>e.filter((e=>n.includes(e.author.username))))(g.user.reviewRequestedMergeRequests.nodes,e),r=a.lazy((()=>s.e(97).then(s.bind(s,8495)).then((e=>({default:e.AddData})))));return(0,R.jsx)(a.Suspense,{fallback:(0,R.jsx)(i.g,{loadingText:"Loading Review requested PRs tab..."}),children:(0,R.jsx)(r,{data:t,tabType:h.gn.reviewRequested})})}},f=()=>{const[e,n]=(0,a.useState)(h.gn.reviewRequested),d=a.lazy((()=>s.e(192).then(s.bind(s,192)).then((e=>({default:e.GroupPRs}))))),o=a.lazy((()=>s.e(288).then(s.bind(s,4288)).then((e=>({default:e.GroupsMergedPRs}))))),u=a.lazy((()=>s.e(308).then(s.bind(s,7308)).then((e=>({default:e.MyPRs})))));return(0,R.jsxs)(t.K,{children:[(0,R.jsxs)(r.t,{selectedValue:e,defaultSelectedValue:h.gn.reviewRequested,onTabSelect:(e,s)=>{n(s.value)},children:[(0,R.jsx)(l.O,{value:h.gn.reviewRequested,children:h.gn.reviewRequested}),(0,R.jsx)(l.O,{value:h.gn.groupPRs,children:h.gn.groupPRs}),(0,R.jsx)(l.O,{value:h.gn.myPRs,children:h.gn.myPRs}),(0,R.jsx)(l.O,{value:h.gn.groupsMergedPRs,children:h.gn.groupsMergedPRs})]}),e===h.gn.reviewRequested&&(0,R.jsx)(b,{}),e===h.gn.groupPRs&&(0,R.jsx)(a.Suspense,{fallback:(0,R.jsx)(i.g,{loadingText:"Loading Group PR's tab..."}),children:(0,R.jsx)(d,{})}),e===h.gn.myPRs&&(0,R.jsx)(a.Suspense,{fallback:(0,R.jsx)(i.g,{loadingText:"Loading My PR's tab..."}),children:(0,R.jsx)(u,{})}),e===h.gn.groupsMergedPRs&&(0,R.jsx)(a.Suspense,{fallback:(0,R.jsx)(i.g,{loadingText:"Loading Groups merged PR's tab..."}),children:(0,R.jsx)(o,{})})]})}}}]);
//# sourceMappingURL=99.a082fa91.chunk.js.map
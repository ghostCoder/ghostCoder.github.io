"use strict";(self.webpackChunkTeams_PR_Manager=self.webpackChunkTeams_PR_Manager||[]).push([[97],{8495:(e,a,s)=>{s.r(a),s.d(a,{AddData:()=>y});var t=s(2791),r=s(6147);var n,i=s(9127),o=s(5792),l=s(9037),c=s(8646),d=s(168);const g=(0,s(9383).Ps)(n||(n=(0,d.Z)(["\n  query PRAssignees($id: MergeRequestID!) {\n    mergeRequest(id: $id) {\n      assignees {\n        nodes {\n          name\n          username\n        }\n      }\n    }\n  }\n"]))),u=async e=>{try{var a;const s=await fetch(r.uI+e+"?"+new URLSearchParams({fields:"labels"}),{method:"GET",headers:{Authorization:"Bearer ".concat(localStorage.getItem("".concat(r.Zx.CLIENT_ID,":atlassian-access-token")))}}),t=await s.json();return void 0===t.fields?[]:null===(a=t.fields)||void 0===a?void 0:a.labels}catch(s){throw s}};var h=s(7974),f=s(9313),b=s(184);const y=e=>{let{data:a,tabType:n}=e;const[d,y]=(0,t.useState)(!0),{setAtlassianInCache:x,setGitInCache:p,setNetworkError:j}=(0,t.useContext)(h.zm),[P,T]=(0,t.useState)(a);(0,t.useEffect)((()=>{d&&(async()=>{const e=await(async(e,a,s,t)=>{try{const e=await(0,o.a)();console.log("GitLab PAT validated: ",e)}catch(r){console.log("GitLab PAT validation failed: ",r),String(r).startsWith("TypeError: Failed to fetch")?t(!0):s(!1)}try{const a=await(0,i.k)();console.log("Atlassian access token refreshed: ",a);for(let s of e){const e=(0,l.Z)(s.title);if(void 0===s.assignees)try{const e=await c.i.query({query:g,variables:{id:s.id},fetchPolicy:"cache-first"});s.assignees=null===e.data.mergeRequest?{nodes:[]}:e.data.mergeRequest.assignees}catch(r){s.assignees={nodes:[]},console.log("Error fetching assignees for PR with ID ".concat(s.id),r)}s.jiraLabels=[];for(let a of e)try{const e=await c.P.fetchQuery({queryKey:["Jira Labels",a],queryFn:()=>u(a),staleTime:3e4,cacheTime:6e5});s.jiraLabels=[...new Set([...s.jiraLabels,...e])]}catch(r){s.jiraLabels=[],console.log(JSON.stringify({error_message:"Error retrieving Jira labels for issue with issue key: ".concat(a),error:r}))}}return e}catch(r){console.log("Error refreshing atlassian token from cache: ",r),String(r).startsWith("TypeError: Failed to fetch")?t(!0):a(!1)}})(JSON.parse(JSON.stringify(a)),x,p,j);T(e),y(!1)})()}),[d,a,x,p,j]);const m=t.lazy((()=>Promise.all([s.e(609),s.e(273),s.e(26)]).then(s.bind(s,3026)).then((e=>({default:e.DisplayPRs}))))),w=t.lazy((()=>Promise.resolve().then(s.bind(s,7905)).then((e=>({default:e.Error})))));switch(n){case r.gn.myPRs:return(0,b.jsx)(t.Suspense,{fallback:(0,b.jsx)(f.g,{loadingText:"Loading My PR's tab..."}),children:(0,b.jsx)(m,{data:P,tabType:n})});case r.gn.reviewRequested:return(0,b.jsx)(t.Suspense,{fallback:(0,b.jsx)(f.g,{loadingText:"Loading Review requested PR's tab..."}),children:(0,b.jsx)(m,{data:P,tabType:n})});case r.gn.groupPRs:return(0,b.jsx)(t.Suspense,{fallback:(0,b.jsx)(f.g,{loadingText:"Loading Group PR's tab..."}),children:(0,b.jsx)(m,{data:P,tabType:n})});case r.gn.groupsMergedPRs:return(0,b.jsx)(t.Suspense,{fallback:(0,b.jsx)(f.g,{loadingText:"Loading Groups merged PR's tab..."}),children:(0,b.jsx)(m,{data:P,tabType:n})});default:return(0,b.jsx)(t.Suspense,{fallback:(0,b.jsx)(f.g,{loadingText:""}),children:(0,b.jsx)(w,{errorMessage:""})})}}},9037:(e,a,s)=>{s.d(a,{Z:()=>t});const t=e=>{let a=[];if("["===e[0]){let s=0;do{let t=0;for(s+=1,"|"===e[s]&&s++;" "===e[s];){if(s++,s===e.length||"]"===e[s]){t=2;break}"|"===e[s]&&(t=1)}if(2===t)break;if(1===t)continue;let r=s+1;for(;" "!==e[r]&&"|"!==e[r]&&"]"!==e[r];)r++;a=[...a,e.slice(s,r)],s=r}while("]"!==e[s])}return a}}}]);
//# sourceMappingURL=97.6476adf9.chunk.js.map
{"version":3,"file":"static/js/302.77c0871d.chunk.js","mappings":"gVAOA,MAAMA,GAAYC,EAAAA,EAAAA,GAAW,CAC3BC,SAAU,CACRC,MAAO,UAIEC,EAAUC,IAAiC,IAAhC,KAAEC,GAAwBD,EAChD,MAAME,EAASP,IACf,OACEQ,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAAAC,UACdF,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,CAACC,UAAWL,EAAOL,SAAUW,WAAW,SAAQH,UACvDF,EAAAA,EAAAA,KAACM,EAAAA,EAAY,OAEC,E,4JClBf,MAAMC,GAAuCC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4e,MCAhD,MAAMC,GAAuCH,EAAAA,EAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4e,cCqBhD,MAAME,EAAkBf,IA+BxB,IA/ByB,KAC9BgB,EAAI,OACJC,EAAM,eACNC,EAAc,kBACdC,EAAiB,aACjBC,EAAY,OACZC,EAAM,YACNC,EAAW,KACXrB,EAAI,YACJsB,EAAW,IACXC,EAAG,YACHC,GAoBDzB,EACC,MAAO0B,EAAOC,IAAYC,EAAAA,EAAAA,UACxBV,EAAiBA,EAAeW,KAAKC,GAAWA,EAAOC,OAAMC,KAAK,MAAQ,KAEtE,OAAEC,EAAM,QAAEC,IAAYC,EAAAA,EAAAA,YAAWC,EAAAA,KACjC,cAAEC,IAAkBF,EAAAA,EAAAA,YAAWG,EAAAA,KAErCC,EAAAA,EAAAA,YAAU,KACW,IAADC,EAAdpB,IACiB,QAAnBoB,EAAAlB,EAAYmB,eAAO,IAAAD,GAAnBA,EAAqBE,QACvB,GACC,CAACpB,EAAaF,IAEjB,MAAMuB,ECjEwBC,EAC9BV,EACAW,IAEO,IACF,IAAIC,IACL,IACKZ,EAAQL,KAAKkB,IAAM,CACpBC,IAAKD,EAAOE,SACZlB,KAAMgB,EAAOG,YAEZL,EAAUhB,KAAKsB,IAAQ,CACxBH,IAAKG,EAASF,SACdlB,KAAMoB,EAASD,UAEjBrB,KAAKuB,GAAmB,CAACA,EAAeJ,IAAKI,MAC/CC,UDiDYT,CAAiBV,EAASjB,GA6F1C,OACEd,EAAAA,EAAAA,KAACmD,EAAAA,EAAQ,CACP9C,WAAW,YACX+C,IAAKjC,EACLkC,aAAa,EACbC,YACExD,IAASyD,EAAAA,GAAcC,aACnB,mBACA,mBAENC,cAAe1C,EAAe2C,OAC9BC,gBAAiB5C,EAAeW,KAAKC,GAAWiC,KAAKC,UAAUlC,KAC/DmC,KAAK,QACLvC,MAAOA,EACPwC,eAzGaC,MAAOC,EAAwBC,KAC9C,IACE,MAAMC,QAAiBC,EAAAA,EAAAA,KACvBC,QAAQC,IAAI,yBAA0BH,EACxC,CAAE,MAAOI,GACPF,QAAQC,IAAI,iCAAkCC,GAC1CC,OAAOD,GAAOE,WAAW,+BAC3BvD,EAAO,QAAS,qDAChBY,KAEAI,GAAc,EAElB,CACA,MAAMwC,EAAYR,EAAKP,gBAAgBjC,KAAKiD,GAAWf,KAAKgB,MAAMD,KAClEN,QAAQC,IAAI,YAAaI,GACzB,MAAMG,EAAkBH,EAAUhD,KAAKC,GAAWA,EAAOkB,MACzD,GAAI/C,IAASyD,EAAAA,GAAcuB,aACzB,IACE,MAIMC,SAJeC,EAAAA,EAAaC,OAAO,CACvCC,SAAU3E,EACV4E,UAAW,CAAE/D,cAAaC,MAAK+D,kBAAmBP,MAG3CX,KAAKmB,yBAAyBC,aAAa5C,UAAU6C,MAC9DlB,QAAQC,IAAI,yBAA0BS,GACtCV,QAAQC,IAAIzD,GACZA,EAAK6B,UAAYqC,EACjB/D,GAAkB,IAChB+D,EAAarD,KAAKsB,IAAgB,CAChCH,IAAKG,EAASF,SACdlB,KAAMoB,EAASD,WAGnBvB,EACEuD,EACgB,OAAZA,QAAY,IAAZA,OAAY,EAAZA,EAAcrD,KAAKsB,GAAqBA,EAASD,OAAMlB,KAAK,MAC5D,IAENX,EAAO,UAAW,qBACpB,CAAE,MAAOqD,GACPF,QAAQC,IAAI,yBAA0BC,GACtCrD,EACE,QACA,sEAEJ,MAEA,IACE,MAIMsE,SAJeR,EAAAA,EAAaC,OAAO,CACvCC,SAAUvE,EACVwE,UAAW,CAAE/D,cAAaC,MAAKoE,kBAAmBZ,MAG3CX,KAAKwB,yBAAyBJ,aAAaK,UAAUJ,MAC9DlB,QAAQC,IAAI,yBAA0BkB,GACtC3E,EAAK8E,UAAYH,EACjBxE,EACEwE,EAAa9D,KAAKkE,IAAgB,CAChC/C,IAAK+C,EAAS9C,SACdlB,KAAMgE,EAAS7C,UAGnBvB,EACEgE,EACgB,OAAZA,QAAY,IAAZA,OAAY,EAAZA,EAAc9D,KAAKkE,GAAqBA,EAAS7C,OAAMlB,KAAK,MAC5D,IAENwC,QAAQC,IACN,0BACAkB,EAAa9D,KAAKkE,IAAgB,CAChC/C,IAAK+C,EAAS9C,SACdlB,KAAMgE,EAAS7C,UAGnB7B,EAAO,UAAW,qBACpB,CAAE,MAAOqD,GACPF,QAAQC,IAAI,yBAA0BC,GACtCrD,EACE,QACA,sEAEJ,CACF,EAwBE2E,aArB4BC,KAC1B/E,EAAe2C,OAAS,GAC1BpC,GAAY,EACd,EAmBEyE,MAAO,CAAEC,SAAU,SACnBC,MAAO,CAAEF,MAAO,CAAEpG,MAAO,MAAQO,SAEhCsC,EAAQd,KAAKiD,IACZ3E,EAAAA,EAAAA,KAACkG,EAAAA,EAAM,CAACtE,KAAMgC,KAAKC,UAAUc,GAAQzE,SAClCyE,EAAO/C,MADiC+C,EAAO9B,QAI3C,EEtKFsD,EAAoBtG,IAY1B,IAZ2B,KAChCgB,EAAI,OACJC,EAAM,YACNM,EAAW,IACXC,EAAG,KACHvB,GAODD,EACC,MAAMuG,GAAYC,EAAAA,EAAAA,IAAM,YAClB,cAAEC,IAAkBC,EAAAA,EAAAA,GAAmBH,GACvClF,EAASA,CAACsF,EAAqBC,IACnCH,GACEI,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAAzG,SAAA,EACJF,EAAAA,EAAAA,KAAC4G,EAAAA,EAAU,CACTC,QACE7G,EAAAA,EAAAA,KAAC8G,EAAAA,EAAY,CAAA5G,UACXF,EAAAA,EAAAA,KAAC+G,EAAAA,EAAI,CAAC1G,WAAW,SAAQH,UACvBF,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAACC,OAAO,OAAM/G,SAAC,UAGzBA,SAEAsG,KAEHxG,EAAAA,EAAAA,KAACkH,EAAAA,EAAS,CAAAhH,SAAEuG,OAEd,CAAED,YAGCW,EAAU7F,IAAeG,EAAAA,EAAAA,WAAmBX,EAAO4C,SACnD3C,EAAgBC,IAAqBS,EAAAA,EAAAA,WAE1C,IACAX,EAAOY,KAAKC,IAAM,CAChBkB,IAAKlB,EAAOmB,SACZlB,KAAMD,EAAOoB,WAIX5B,GAAciG,EAAAA,EAAAA,QAAyB,MACvCC,GAAeC,EAAAA,EAAAA,cAAY,KAC/BhG,GAAY,EAAK,GAChB,IAEH,OAAiB,IAAb6F,GAEAT,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CACJC,uBAAqB,EACrBC,OAAQ,CAAEC,YAAa,SACvBC,QAASN,EAAanH,SAAA,EAEtBF,EAAAA,EAAAA,KAAC4H,EAAAA,EAAO,CAACxB,UAAWA,IACnBrF,EAAeW,KAAKC,IACnB3B,EAAAA,EAAAA,KAAC6H,EAAAA,EAAO,CACN9E,KAAMpB,EAAOC,KACbkC,KAAK,QACLgE,cAAc,SACdC,OAAQ,CAAEC,MAAO,oBAOvBtB,EAAAA,EAAAA,MAACa,EAAAA,EAAK,CAAArH,SAAA,EACJF,EAAAA,EAAAA,KAAC4H,EAAAA,EAAO,CAACxB,UAAWA,KACpBpG,EAAAA,EAAAA,KAACY,EAAe,CACdC,KAAMA,EACNC,OAAQA,EACRC,eAAgBA,EAChBC,kBAAmBA,EACnBE,OAAQA,EACRC,YAAaA,EACbrB,KAAMA,EACNsB,YAAaA,EACbC,IAAKA,EACLC,YAAaA,EACbL,aAAwC,IAA1BF,EAAe2C,WAIrC,E,cCxGK,MCKMuE,EAAUpI,IAMhB,IANiB,MACtBqI,EAAK,OACLC,GAIDtI,EACC,MAAMuI,GAAYC,EAAAA,EAAAA,GAAwBH,GACpCI,GDZ8B,KADAC,ECaWL,GDZhCM,QAAQ,IAAK,GACxBD,EACAA,EAAQE,MAAMF,EAAQC,QAAQ,IAAK,GAAK,GAHRD,MCepC,OACE7B,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAAA9G,SAAA,CACmB,IAArBkI,EAAU1E,OAAe,KAAO,GAChC0E,EAAU1G,KAAI,CAACgH,EAAUC,KACxBjC,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CAAA9G,SAAA,EACHF,EAAAA,EAAAA,KAAC+G,EAAAA,EAAI,CAAC6B,KAAMC,EAAAA,GAAkBH,EAAUI,OAAO,SAAQ5I,SACpDwI,IAEFC,IAAUP,EAAU1E,OAAS,EAAI,MAAQ,KAJjCgF,KAOS,IAArBN,EAAU1E,OAAe,MAAQ,IAClC1D,EAAAA,EAAAA,KAAC+G,EAAAA,EAAI,CAAC6B,KAAMT,EAAQW,OAAO,SAAQ5I,SAChCoI,MAEE,ECjBES,EAAwB,EACnCC,EAAAA,EAAAA,GAA0B,CACxBC,SAAU,QACVC,iBAAkBA,KAChBlJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAACC,OAAO,OAAOkC,MAAM,SAAQjJ,SAAC,UAIrCkJ,WAAavI,IACXb,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACoJ,UAAQ,EAAAnJ,UACvBF,EAAAA,EAAAA,KAACiI,EAAO,CAACC,MAAOrH,EAAKqH,MAAOC,OAAQtH,EAAKsH,cAI/Ca,EAAAA,EAAAA,GAA0B,CACxBC,SAAU,YACVC,iBAAkBA,KAChBlJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAACC,OAAO,OAAOkC,MAAM,SAAQjJ,SAAC,cAIrCkJ,WAAavI,QACQyI,IAAnBzI,EAAK8E,WACH3F,EAAAA,EAAAA,KAACJ,EAAO,CAACE,KAAK,YAEdE,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACoJ,UAAQ,EAAAnJ,UACvBF,EAAAA,EAAAA,KAACmG,EAAiB,CAChBtF,KAAMA,EACNC,OAAQD,EAAK8E,UACbvE,YAAaP,EAAKO,YAClBC,IAAKR,EAAKQ,IACVvB,KAAMyD,EAAAA,GAAcC,oBAK9BwF,EAAAA,EAAAA,GAA0B,CACxBC,SAAU,YACVC,iBAAkBA,KAChBlJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAACC,OAAO,OAAOkC,MAAM,SAAQjJ,SAAC,cAIrCkJ,WAAavI,IACXb,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACoJ,UAAQ,EAAAnJ,UACvBF,EAAAA,EAAAA,KAACmG,EAAiB,CAChBtF,KAAMA,EACNC,OAAQD,EAAK6B,UACbtB,YAAaP,EAAKO,YAClBC,IAAKR,EAAKQ,IACVvB,KAAMyD,EAAAA,GAAcuB,oBAK5BkE,EAAAA,EAAAA,GAA0B,CACxBC,SAAU,aACVC,iBAAkBA,KAChBlJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAACC,OAAO,OAAOkC,MAAM,SAAQjJ,SAAC,gBAIrCkJ,WAAavI,IACXb,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACoJ,UAAQ,EAAAnJ,UACvBF,EAAAA,EAAAA,KAACuH,EAAAA,EAAK,CAACC,uBAAqB,EAACC,OAAQ,CAAEC,YAAa,SAAUxH,SAC3DW,EAAK0I,WAAW7H,KAAK8H,IACpBxJ,EAAAA,EAAAA,KAAC6H,EAAAA,EAAO,CACN9E,KAAMyG,EAASzG,KACfe,KAAK,QACLiE,OAAQ,CAAEC,MAAO,YACjBF,cAAc,oBAO1BkB,EAAAA,EAAAA,GAA0B,CACxBC,SAAU,WACVC,iBAAkBA,KAChBlJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAACC,OAAO,OAAOkC,MAAM,SAAQjJ,SAAC,cAIrCkJ,WAAavI,IACXb,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CACdoJ,UAAQ,EACRI,MACE5I,EAAK6I,WACH1J,EAAAA,EAAAA,KAACa,EAAK6I,SAASC,KAAI,CAACC,YAAa/I,EAAK6I,SAAUG,YAEnD3J,UAEDF,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAAA9G,SAAEW,EAAK6I,SAAUI,cAI5Bd,EAAAA,EAAAA,GAA0B,CACxBC,SAAU,iBACVC,iBAAkBA,KAChBlJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAACC,OAAO,OAAOkC,MAAM,SAAQjJ,SAAC,oBAIrCkJ,WAAavI,IAAI,IAAAkJ,EAAA,OACf/J,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CACdoJ,UAAQ,EACRI,MACqB,QAAnBM,EAAAlJ,EAAKmJ,sBAAc,IAAAD,GAAnBA,EAAqBJ,MACnB3J,EAAAA,EAAAA,KAACa,EAAKmJ,eAAeL,KAAI,CACvBC,YAAa/I,EAAKmJ,eAAeH,YAEjC,KACL3J,UAEDF,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAAA9G,SAAEW,EAAKmJ,eAAeF,UACX,KAGtBd,EAAAA,EAAAA,GAA0B,CACxBC,SAAU,aACVC,iBAAkBA,KAChBlJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAACC,OAAO,OAAOkC,MAAM,SAAQjJ,SAAC,gBAIrCkJ,WAAavI,QACSyI,IAApBzI,EAAKoJ,YACHjK,EAAAA,EAAAA,KAACJ,EAAO,CAACE,KAAK,WAEdE,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAAAC,UACdF,EAAAA,EAAAA,KAACuH,EAAAA,EAAK,CACJ2C,YAAU,EACVC,MAAI,EACJ3C,uBAAqB,EACrBC,OAAQ,CAAEC,YAAa,SAAUxH,SAEhCW,EAAKoJ,WAAWvI,KAAK0I,IACpBpK,EAAAA,EAAAA,KAACqK,EAAAA,EAAK,CAAiBhK,WAAW,OAAOyD,KAAK,SAAQ5D,SACnDkK,GADSA,YAQxBpB,EAAAA,EAAAA,GAA0B,CACxBC,SAAU,WACVC,iBAAkBA,KAChBlJ,EAAAA,EAAAA,KAACgH,EAAAA,EAAI,CAACC,OAAO,OAAOkC,MAAM,SAAQjJ,SAAC,cAIrCkJ,WAAavI,IACXb,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAAAC,UACdF,EAAAA,EAAAA,KAACuH,EAAAA,EAAK,CACJ2C,YAAU,EACVC,MAAI,EACJ3C,uBAAqB,EACrBC,OAAQ,CAAEC,YAAa,SAAUxH,SAEhCW,EAAKyJ,SAAS5I,KAAK6I,IAClBvK,EAAAA,EAAAA,KAACqK,EAAAA,EAAK,CAAqBhK,WAAW,OAAOyD,KAAK,SAAQ5D,SACvDqK,EAAQrC,OADCqC,EAAQrC,gBAUnBsC,EAAsBzB,EAChCN,MAAM,EAAG,GACTgC,OAAO1B,EAAsBN,MAAM,IAEzBiC,EAAc,CACzBxC,MAAO,CACLlC,SAAU,KAEZL,UAAW,CACTK,SAAU,KAEZtD,UAAW,CACTsD,SAAU,KAEZuD,WAAY,CACVvD,SAAU,KAEZ0D,SAAU,CACR1D,SAAU,KAEZgE,eAAgB,CACdhE,SAAU,KAEZiE,WAAY,CACVjE,SAAU,KAEZsE,SAAU,CACRtE,SAAU,MC/LRxG,GAAYC,EAAAA,EAAAA,GAAW,CAC3BkL,IAAK,CACHC,WAAY,MACZC,cAAe,OAEjBC,YAAa,CACXC,UAAW,SACXC,cAAe,YAINC,EAAUpL,IAMhB,IANiB,MACtBqL,EAAK,QACLC,GAIDtL,EACC,MAAOuL,EAAqBC,IAC1B5J,EAAAA,EAAAA,UAAmCiJ,GAE/BY,GAAiBhE,EAAAA,EAAAA,cACrB,CACEiE,EAAsDC,KAElD,IADJ,SAAEvC,EAAQ,MAAEtJ,GAAmD6L,EAE/DH,GAAwBI,IAAK,IACxBA,EACH,CAACxC,GAAW,IACPwC,EAAMxC,GACTyC,WAAY/L,MAEb,GAEL,IAGIgM,EACJR,IAAYS,EAAAA,GAASC,gBACjBrB,EACAzB,GAEE+C,sBAAuBC,EAAY,SAAEC,IAAaC,EAAAA,EAAAA,GACxD,CACEN,UACAT,SAEF,EAACgB,EAAAA,EAAAA,GAA8B,CAAEd,sBAAqBE,qBAGlDvL,EAASP,IACf,OACEkH,EAAAA,EAAAA,MAACyF,EAAAA,EAAK,CAAC/I,IAAK4I,EAAS9L,SAAA,EACnBF,EAAAA,EAAAA,KAACoM,EAAAA,EAAW,CAAAlM,UACVF,EAAAA,EAAAA,KAACqM,EAAAA,EAAQ,CAAAnM,SACNyL,EAAQjK,KAAI,CAAC4K,EAAQ3D,KACpB3I,EAAAA,EAAAA,KAACuM,EAAAA,EAAe,IAEVR,EAAaS,wBAAwBF,EAAOrD,UAAS/I,SAExDoM,EAAOpD,oBAHHoD,EAAOrD,iBAQpBjJ,EAAAA,EAAAA,KAACyM,EAAAA,EAAS,CAAAvM,SACPgL,EAAMxJ,KAAKb,IACVb,EAAAA,EAAAA,KAACqM,EAAAA,EAAQ,CAAAnM,SACNyL,EAAQjK,KAAK4K,IACZtM,EAAAA,EAAAA,KAAC0M,EAAAA,EAAS,CAERtM,UAAWL,EAAO4K,OACdoB,EAAaY,kBAAkBL,EAAOrD,UAAS/I,SAElDoM,EAAOlD,WAAWvI,IAJdyL,EAAOrD,aAHHpI,EAAKgC,WAalB,C","sources":["components/prTabs/tabs/displayPRs/prTables/tableColumns/columnComponents/Shimmer.tsx","utilities/prMutations/MUTATION_SET_REVIEWERS.ts","utilities/prMutations/MUTATION_SET_ASSIGNEES.ts","components/prTabs/tabs/displayPRs/prTables/tableColumns/columnComponents/EditorsCombobox.tsx","utilities/getPeopleOptions.ts","components/prTabs/tabs/displayPRs/prTables/tableColumns/columnComponents/MutationComponent.tsx","utilities/getPRTitleWithoutKeys.ts","components/prTabs/tabs/displayPRs/prTables/tableColumns/columnComponents/PRTitle.tsx","components/prTabs/tabs/displayPRs/prTables/tableColumns/TableColumns.tsx","components/prTabs/tabs/displayPRs/prTables/PRTable.tsx"],"sourcesContent":["import {\n  Skeleton,\n  SkeletonItem,\n  TableCellLayout,\n  makeStyles,\n} from \"@fluentui/react-components\";\n\nconst useStyles = makeStyles({\n  skeleton: {\n    width: \"90px\",\n  },\n});\n\nexport const Shimmer = ({ type }: { type: string }) => {\n  const styles = useStyles();\n  return (\n    <TableCellLayout>\n      <Skeleton className={styles.skeleton} appearance=\"opaque\">\n        <SkeletonItem />\n      </Skeleton>\n    </TableCellLayout>\n  );\n};\n","import { DocumentNode, gql } from \"@apollo/client\";\n\nexport const MUTATION_SET_REVIEWERS: DocumentNode = gql`\n  mutation SetMergeRequestReviewers(\n    $projectPath: ID!\n    $iid: String!\n    $reviewerUsernames: [String!]!\n  ) {\n    mergeRequestSetReviewers(\n      input: {\n        projectPath: $projectPath\n        iid: $iid\n        reviewerUsernames: $reviewerUsernames\n        operationMode: REPLACE\n      }\n    ) {\n      errors\n      mergeRequest {\n        reviewers {\n          nodes {\n            username\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n","import { DocumentNode, gql } from \"@apollo/client\";\n\nexport const MUTATION_SET_ASSIGNEES: DocumentNode = gql`\n  mutation SetMergeRequestAssignees(\n    $projectPath: ID!\n    $iid: String!\n    $assigneeUsernames: [String!]!\n  ) {\n    mergeRequestSetAssignees(\n      input: {\n        projectPath: $projectPath\n        iid: $iid\n        assigneeUsernames: $assigneeUsernames\n        operationMode: REPLACE\n      }\n    ) {\n      errors\n      mergeRequest {\n        assignees {\n          nodes {\n            username\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useEffect, useContext, useState } from \"react\";\nimport {\n  Combobox,\n  Option,\n  OptionOnSelectData,\n  SelectionEvents,\n  ToastIntent,\n} from \"@fluentui/react-components\";\nimport { getPeopleOptions } from \"../../../../../../../utilities/getPeopleOptions\";\nimport { validateGitLabToken } from \"../../../../../../../utilities/tokenValidationUtilities/validateGitLabToken\";\nimport {\n  MembersContext,\n  TokensInCacheContext,\n} from \"../../../../../../../contexts/Context\";\nimport { clientGitLab } from \"../../../../../../../utilities/queryClients\";\nimport { MUTATION_SET_REVIEWERS } from \"../../../../../../../utilities/prMutations/MUTATION_SET_REVIEWERS\";\nimport { MUTATION_SET_ASSIGNEES } from \"../../../../../../../utilities/prMutations/MUTATION_SET_ASSIGNEES\";\nimport {\n  MUTATION_TYPE,\n  PRItem,\n  Person,\n} from \"../../../../../../../utilities/constants\";\n\nexport const EditorsCombobox = ({\n  item,\n  people,\n  selectedPeople,\n  setSelectedPeople,\n  focusOnMount,\n  notify,\n  comboBoxRef,\n  type,\n  projectPath,\n  iid,\n  setEditMode,\n}: {\n  item: PRItem;\n  people: Person[];\n  selectedPeople: { key: string; text: string }[];\n  setSelectedPeople: React.Dispatch<\n    React.SetStateAction<\n      {\n        key: string;\n        text: string;\n      }[]\n    >\n  >;\n  focusOnMount: boolean;\n  notify: (intent: ToastIntent, message: string) => void;\n  comboBoxRef: React.RefObject<HTMLInputElement>;\n  type: string;\n  projectPath: string;\n  iid: string;\n  setEditMode: React.Dispatch<React.SetStateAction<boolean>>;\n}) => {\n  const [value, setValue] = useState<string>(\n    selectedPeople ? selectedPeople.map((person) => person.text).join(\", \") : \"\"\n  );\n  const { reload, members } = useContext(MembersContext);\n  const { setGitInCache } = useContext(TokensInCacheContext);\n\n  useEffect(() => {\n    if (focusOnMount) {\n      comboBoxRef.current?.focus();\n    }\n  }, [comboBoxRef, focusOnMount]);\n\n  const options = getPeopleOptions(members, people);\n\n  const onSelect = async (event: SelectionEvents, data: OptionOnSelectData) => {\n    try {\n      const response = await validateGitLabToken();\n      console.log(\"GitLab PAT validated: \", response);\n    } catch (error) {\n      console.log(\"GitLab PAT validation failed: \", error);\n      if (String(error).startsWith(\"TypeError: Failed to fetch\")) {\n        notify(\"error\", \"offline or network does not have access to GitLab\");\n        reload();\n      } else {\n        setGitInCache(false);\n      }\n    }\n    const newPeople = data.selectedOptions.map((option) => JSON.parse(option));\n    console.log(\"newPeople\", newPeople);\n    const peopleUsernames = newPeople.map((person) => person.key);\n    if (type === MUTATION_TYPE.setReviewers) {\n      try {\n        const result = await clientGitLab.mutate({\n          mutation: MUTATION_SET_REVIEWERS,\n          variables: { projectPath, iid, reviewerUsernames: peopleUsernames },\n        });\n        const newReviewers =\n          result.data.mergeRequestSetReviewers.mergeRequest.reviewers.nodes;\n        console.log(\"Updated reviewers to: \", newReviewers);\n        console.log(item);\n        item.reviewers = newReviewers;\n        setSelectedPeople(() =>\n          newReviewers.map((reviewer: Person) => ({\n            key: reviewer.username,\n            text: reviewer.name,\n          }))\n        );\n        setValue(\n          newReviewers\n            ? newReviewers?.map((reviewer: Person) => reviewer.name).join(\", \")\n            : \"\"\n        );\n        notify(\"success\", \"Reviewers updated!\");\n      } catch (error) {\n        console.log(\"Error while mutation: \", error);\n        notify(\n          \"error\",\n          \"Action unauthorized or scopes missing from token (required: 'api').\"\n        );\n      }\n    } else {\n      try {\n        const result = await clientGitLab.mutate({\n          mutation: MUTATION_SET_ASSIGNEES,\n          variables: { projectPath, iid, assigneeUsernames: peopleUsernames },\n        });\n        const newAssignees =\n          result.data.mergeRequestSetAssignees.mergeRequest.assignees.nodes;\n        console.log(\"Updated assignees to: \", newAssignees);\n        item.assignees = newAssignees;\n        setSelectedPeople(\n          newAssignees.map((assignee: Person) => ({\n            key: assignee.username,\n            text: assignee.name,\n          }))\n        );\n        setValue(\n          newAssignees\n            ? newAssignees?.map((assignee: Person) => assignee.name).join(\", \")\n            : \"\"\n        );\n        console.log(\n          \"Setting assignees to : \",\n          newAssignees.map((assignee: Person) => ({\n            key: assignee.username,\n            text: assignee.name,\n          }))\n        );\n        notify(\"success\", \"Reviewers updated!\");\n      } catch (error) {\n        console.log(\"Error while mutation: \", error);\n        notify(\n          \"error\",\n          \"Action unauthorized or scopes missing from token (required: 'api').\"\n        );\n      }\n    }\n  };\n\n  const unMountIfPeopleSelected = () => {\n    if (selectedPeople.length > 0) {\n      setEditMode(false);\n    }\n  };\n\n  return (\n    <Combobox\n      appearance=\"underline\"\n      ref={comboBoxRef}\n      multiselect={true}\n      placeholder={\n        type === MUTATION_TYPE.setAssignees\n          ? \"Select assignees\"\n          : \"Select reviewers\"\n      }\n      defaultOpen={!!selectedPeople.length}\n      selectedOptions={selectedPeople.map((person) => JSON.stringify(person))}\n      size=\"small\"\n      value={value}\n      onOptionSelect={onSelect}\n      onOpenChange={unMountIfPeopleSelected}\n      style={{ minWidth: \"unset\" }}\n      input={{ style: { width: 190 } }}\n    >\n      {options.map((option) => (\n        <Option text={JSON.stringify(option)} key={option.key}>\n          {option.text}\n        </Option>\n      ))}\n    </Combobox>\n  );\n};\n","import { Person, option } from \"./constants\";\n\nexport const getPeopleOptions = (\n  members: Person[],\n  reviewers: Person[]\n): option[] => {\n  return [\n    ...new Map(\n      [\n        ...members.map((member) => ({\n          key: member.username,\n          text: member.name,\n        })),\n        ...reviewers.map((reviewer) => ({\n          key: reviewer.username,\n          text: reviewer.name,\n        })),\n      ].map((reviewerOption) => [reviewerOption.key, reviewerOption])\n    ).values(),\n  ];\n};\n","import { useState, useCallback, useRef } from \"react\";\nimport { Stack } from \"@fluentui/react\";\nimport {\n  Persona,\n  useId,\n  Link,\n  Toaster,\n  useToastController,\n  ToastTitle,\n  ToastTrigger,\n  Toast,\n  ToastBody,\n  Text,\n  ToastIntent,\n} from \"@fluentui/react-components\";\nimport { EditorsCombobox } from \"./EditorsCombobox\";\nimport { PRItem, Person } from \"../../../../../../../utilities/constants\";\n\nexport const MutationComponent = ({\n  item,\n  people,\n  projectPath,\n  iid,\n  type,\n}: {\n  item: PRItem;\n  people: Person[];\n  projectPath: string;\n  iid: string;\n  type: string;\n}) => {\n  const toasterId = useId(\"toaster\");\n  const { dispatchToast } = useToastController(toasterId);\n  const notify = (intent: ToastIntent, message: string) =>\n    dispatchToast(\n      <Toast>\n        <ToastTitle\n          action={\n            <ToastTrigger>\n              <Link appearance=\"subtle\">\n                <Text weight=\"bold\">x</Text>\n              </Link>\n            </ToastTrigger>\n          }\n        >\n          {intent}\n        </ToastTitle>\n        <ToastBody>{message}</ToastBody>\n      </Toast>,\n      { intent }\n    );\n\n  const [editMode, setEditMode] = useState<boolean>(!people.length);\n  const [selectedPeople, setSelectedPeople] = useState<\n    { key: string; text: string }[]\n  >(() =>\n    people.map((person) => ({\n      key: person.username,\n      text: person.name,\n    }))\n  );\n\n  const comboBoxRef = useRef<HTMLInputElement>(null);\n  const openComboBox = useCallback(() => {\n    setEditMode(true);\n  }, []);\n\n  if (editMode === false) {\n    return (\n      <Stack\n        enableScopedSelectors\n        tokens={{ childrenGap: \"0.5em\" }}\n        onClick={openComboBox}\n      >\n        <Toaster toasterId={toasterId} />\n        {selectedPeople.map((person) => (\n          <Persona\n            name={person.text}\n            size=\"small\"\n            textAlignment=\"center\"\n            avatar={{ color: \"colorful\" }}\n          />\n        ))}\n      </Stack>\n    );\n  } else {\n    return (\n      <Stack>\n        <Toaster toasterId={toasterId} />\n        <EditorsCombobox\n          item={item}\n          people={people}\n          selectedPeople={selectedPeople}\n          setSelectedPeople={setSelectedPeople}\n          notify={notify}\n          comboBoxRef={comboBoxRef}\n          type={type}\n          projectPath={projectPath}\n          iid={iid}\n          setEditMode={setEditMode}\n          focusOnMount={selectedPeople.length !== 0}\n        />\n      </Stack>\n    );\n  }\n};\n","export const getPRTitleWithoutKeys = (prTitle: string): string => {\n  return prTitle.indexOf(\"]\", 0) === -1\n    ? prTitle\n    : prTitle.slice(prTitle.indexOf(\"]\", 0) + 1);\n};\n","import { Text, Link } from \"@fluentui/react-components\";\nimport { getIssueKeysFromPRTitle } from \"../../../../../../../utilities/getIssueKeysFromPRTitle\";\nimport { getPRTitleWithoutKeys } from \"../../../../../../../utilities/getPRTitleWithoutKeys\";\nimport { JIRA_ISSUE_LINK } from \"../../../../../../../utilities/constants\";\n\nexport const PRTitle = ({\n  title,\n  webUrl,\n}: {\n  title: string;\n  webUrl: string;\n}) => {\n  const issueKeys = getIssueKeysFromPRTitle(title);\n  const titleWithoutKeys = getPRTitleWithoutKeys(title);\n\n  return (\n    <Text>\n      {issueKeys.length !== 0 ? \"[ \" : \"\"}\n      {issueKeys.map((issueKey, index) => (\n        <Text key={issueKey}>\n          <Link href={JIRA_ISSUE_LINK + issueKey} target=\"_blank\">\n            {issueKey}\n          </Link>\n          {index !== issueKeys.length - 1 ? \" | \" : \"\"}\n        </Text>\n      ))}\n      {issueKeys.length !== 0 ? \" ] \" : \"\"}\n      <Link href={webUrl} target=\"_blank\">\n        {titleWithoutKeys}\n      </Link>\n    </Text>\n  );\n};\n","import { Stack } from \"@fluentui/react\";\nimport {\n  TableCellLayout,\n  createTableColumn,\n  Text,\n  Persona,\n  Badge,\n} from \"@fluentui/react-components\";\nimport { Shimmer } from \"./columnComponents/Shimmer\";\nimport { MutationComponent } from \"./columnComponents/MutationComponent\";\nimport { PRTitle } from \"./columnComponents/PRTitle\";\nimport { MUTATION_TYPE, PRItem } from \"../../../../../../utilities/constants\";\n\nexport const columnsForUnMergedPRs = [\n  createTableColumn<PRItem>({\n    columnId: \"title\",\n    renderHeaderCell: () => (\n      <Text weight=\"bold\" align=\"center\">\n        Title\n      </Text>\n    ),\n    renderCell: (item) => (\n      <TableCellLayout truncate>\n        <PRTitle title={item.title} webUrl={item.webUrl} />\n      </TableCellLayout>\n    ),\n  }),\n  createTableColumn<PRItem>({\n    columnId: \"assignees\",\n    renderHeaderCell: () => (\n      <Text weight=\"bold\" align=\"center\">\n        Assignees\n      </Text>\n    ),\n    renderCell: (item) =>\n      item.assignees === undefined ? (\n        <Shimmer type=\"person\" />\n      ) : (\n        <TableCellLayout truncate>\n          <MutationComponent\n            item={item}\n            people={item.assignees}\n            projectPath={item.projectPath}\n            iid={item.iid}\n            type={MUTATION_TYPE.setAssignees}\n          />\n        </TableCellLayout>\n      ),\n  }),\n  createTableColumn<PRItem>({\n    columnId: \"reviewers\",\n    renderHeaderCell: () => (\n      <Text weight=\"bold\" align=\"center\">\n        Reviewers\n      </Text>\n    ),\n    renderCell: (item) => (\n      <TableCellLayout truncate>\n        <MutationComponent\n          item={item}\n          people={item.reviewers}\n          projectPath={item.projectPath}\n          iid={item.iid}\n          type={MUTATION_TYPE.setReviewers}\n        />\n      </TableCellLayout>\n    ),\n  }),\n  createTableColumn<PRItem>({\n    columnId: \"approvedBy\",\n    renderHeaderCell: () => (\n      <Text weight=\"bold\" align=\"center\">\n        Approved By\n      </Text>\n    ),\n    renderCell: (item) => (\n      <TableCellLayout truncate>\n        <Stack enableScopedSelectors tokens={{ childrenGap: \"0.3em\" }}>\n          {item.approvedBy.map((approver) => (\n            <Persona\n              name={approver.name}\n              size=\"small\"\n              avatar={{ color: \"colorful\" }}\n              textAlignment=\"center\"\n            />\n          ))}\n        </Stack>\n      </TableCellLayout>\n    ),\n  }),\n  createTableColumn<PRItem>({\n    columnId: \"prStatus\",\n    renderHeaderCell: () => (\n      <Text weight=\"bold\" align=\"center\">\n        PR Status\n      </Text>\n    ),\n    renderCell: (item) => (\n      <TableCellLayout\n        truncate\n        media={\n          item.prStatus && (\n            <item.prStatus.Icon primaryFill={item.prStatus!.iconColor} />\n          )\n        }\n      >\n        <Text>{item.prStatus!.status}</Text>\n      </TableCellLayout>\n    ),\n  }),\n  createTableColumn<PRItem>({\n    columnId: \"pipelineStatus\",\n    renderHeaderCell: () => (\n      <Text weight=\"bold\" align=\"center\">\n        Pipeline Status\n      </Text>\n    ),\n    renderCell: (item) => (\n      <TableCellLayout\n        truncate\n        media={\n          item.pipelineStatus?.Icon ? (\n            <item.pipelineStatus.Icon\n              primaryFill={item.pipelineStatus.iconColor}\n            />\n          ) : null\n        }\n      >\n        <Text>{item.pipelineStatus.status}</Text>\n      </TableCellLayout>\n    ),\n  }),\n  createTableColumn<PRItem>({\n    columnId: \"jiraLabels\",\n    renderHeaderCell: () => (\n      <Text weight=\"bold\" align=\"center\">\n        Jira Labels\n      </Text>\n    ),\n    renderCell: (item) =>\n      item.jiraLabels === undefined ? (\n        <Shimmer type=\"label\" />\n      ) : (\n        <TableCellLayout>\n          <Stack\n            horizontal\n            wrap\n            enableScopedSelectors\n            tokens={{ childrenGap: \"0.4em\" }}\n          >\n            {item.jiraLabels.map((jiraLabel) => (\n              <Badge key={jiraLabel} appearance=\"tint\" size=\"medium\">\n                {jiraLabel}\n              </Badge>\n            ))}\n          </Stack>\n        </TableCellLayout>\n      ),\n  }),\n  createTableColumn<PRItem>({\n    columnId: \"prLabels\",\n    renderHeaderCell: () => (\n      <Text weight=\"bold\" align=\"center\">\n        PR Labels\n      </Text>\n    ),\n    renderCell: (item) => (\n      <TableCellLayout>\n        <Stack\n          horizontal\n          wrap\n          enableScopedSelectors\n          tokens={{ childrenGap: \"0.4em\" }}\n        >\n          {item.prLabels.map((prLabel) => (\n            <Badge key={prLabel.title} appearance=\"tint\" size=\"medium\">\n              {prLabel.title}\n            </Badge>\n          ))}\n        </Stack>\n      </TableCellLayout>\n    ),\n  }),\n];\n\nexport const columnsForMergedPRs = columnsForUnMergedPRs\n  .slice(0, 4)\n  .concat(columnsForUnMergedPRs.slice(5));\n\nexport const columnSizes = {\n  title: {\n    minWidth: 340,\n  },\n  assignees: {\n    minWidth: 220,\n  },\n  reviewers: {\n    minWidth: 220,\n  },\n  approvedBy: {\n    minWidth: 115,\n  },\n  prStatus: {\n    minWidth: 140,\n  },\n  pipelineStatus: {\n    minWidth: 150,\n  },\n  jiraLabels: {\n    minWidth: 425,\n  },\n  prLabels: {\n    minWidth: 425,\n  },\n};\n","import { useState, useCallback } from \"react\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHeader,\n  TableHeaderCell,\n  TableRow,\n  useTableColumnSizing_unstable,\n  useTableFeatures,\n  makeStyles,\n  TableColumnId,\n  TableColumnSizingOptions,\n} from \"@fluentui/react-components\";\nimport {\n  columnsForUnMergedPRs,\n  columnsForMergedPRs,\n  columnSizes,\n} from \"./tableColumns/TableColumns\";\nimport { TAB_TYPE, PRItem } from \"../../../../../utilities/constants\";\n\nconst useStyles = makeStyles({\n  row: {\n    paddingTop: \"1em\",\n    paddingBottom: \"1em\",\n  },\n  tableHeader: {\n    textAlign: \"center\",\n    verticalAlign: \"middle\",\n  },\n});\n\nexport const PRTable = ({\n  items,\n  tabType,\n}: {\n  items: PRItem[];\n  tabType: string;\n}) => {\n  const [columnSizingOptions, setColumnSizingOptions] =\n    useState<TableColumnSizingOptions>(columnSizes);\n\n  const onColumnResize = useCallback(\n    (\n      e: KeyboardEvent | TouchEvent | MouseEvent | undefined,\n      { columnId, width }: { columnId: TableColumnId; width: number }\n    ) => {\n      setColumnSizingOptions((state) => ({\n        ...state,\n        [columnId]: {\n          ...state[columnId],\n          idealWidth: width,\n        },\n      }));\n    },\n    []\n  );\n\n  const columns =\n    tabType === TAB_TYPE.groupsMergedPRs\n      ? columnsForMergedPRs\n      : columnsForUnMergedPRs;\n\n  const { columnSizing_unstable: columnSizing, tableRef } = useTableFeatures(\n    {\n      columns,\n      items,\n    },\n    [useTableColumnSizing_unstable({ columnSizingOptions, onColumnResize })]\n  );\n\n  const styles = useStyles();\n  return (\n    <Table ref={tableRef}>\n      <TableHeader>\n        <TableRow>\n          {columns.map((column, index) => (\n            <TableHeaderCell\n              key={column.columnId}\n              {...columnSizing.getTableHeaderCellProps(column.columnId)}\n            >\n              {column.renderHeaderCell()}\n            </TableHeaderCell>\n          ))}\n        </TableRow>\n      </TableHeader>\n      <TableBody>\n        {items.map((item) => (\n          <TableRow key={item.key}>\n            {columns.map((column) => (\n              <TableCell\n                key={column.columnId}\n                className={styles.row}\n                {...columnSizing.getTableCellProps(column.columnId)}\n              >\n                {column.renderCell(item)}\n              </TableCell>\n            ))}\n          </TableRow>\n        ))}\n      </TableBody>\n    </Table>\n  );\n};\n"],"names":["useStyles","makeStyles","skeleton","width","Shimmer","_ref","type","styles","_jsx","TableCellLayout","children","Skeleton","className","appearance","SkeletonItem","MUTATION_SET_REVIEWERS","gql","_templateObject","_taggedTemplateLiteral","MUTATION_SET_ASSIGNEES","EditorsCombobox","item","people","selectedPeople","setSelectedPeople","focusOnMount","notify","comboBoxRef","projectPath","iid","setEditMode","value","setValue","useState","map","person","text","join","reload","members","useContext","MembersContext","setGitInCache","TokensInCacheContext","useEffect","_comboBoxRef$current","current","focus","options","getPeopleOptions","reviewers","Map","member","key","username","name","reviewer","reviewerOption","values","Combobox","ref","multiselect","placeholder","MUTATION_TYPE","setAssignees","defaultOpen","length","selectedOptions","JSON","stringify","size","onOptionSelect","async","event","data","response","validateGitLabToken","console","log","error","String","startsWith","newPeople","option","parse","peopleUsernames","setReviewers","newReviewers","clientGitLab","mutate","mutation","variables","reviewerUsernames","mergeRequestSetReviewers","mergeRequest","nodes","newAssignees","assigneeUsernames","mergeRequestSetAssignees","assignees","assignee","onOpenChange","unMountIfPeopleSelected","style","minWidth","input","Option","MutationComponent","toasterId","useId","dispatchToast","useToastController","intent","message","_jsxs","Toast","ToastTitle","action","ToastTrigger","Link","Text","weight","ToastBody","editMode","useRef","openComboBox","useCallback","Stack","enableScopedSelectors","tokens","childrenGap","onClick","Toaster","Persona","textAlignment","avatar","color","PRTitle","title","webUrl","issueKeys","getIssueKeysFromPRTitle","titleWithoutKeys","prTitle","indexOf","slice","issueKey","index","href","JIRA_ISSUE_LINK","target","columnsForUnMergedPRs","createTableColumn","columnId","renderHeaderCell","align","renderCell","truncate","undefined","approvedBy","approver","media","prStatus","Icon","primaryFill","iconColor","status","_item$pipelineStatus","pipelineStatus","jiraLabels","horizontal","wrap","jiraLabel","Badge","prLabels","prLabel","columnsForMergedPRs","concat","columnSizes","row","paddingTop","paddingBottom","tableHeader","textAlign","verticalAlign","PRTable","items","tabType","columnSizingOptions","setColumnSizingOptions","onColumnResize","e","_ref2","state","idealWidth","columns","TAB_TYPE","groupsMergedPRs","columnSizing_unstable","columnSizing","tableRef","useTableFeatures","useTableColumnSizing_unstable","Table","TableHeader","TableRow","column","TableHeaderCell","getTableHeaderCellProps","TableBody","TableCell","getTableCellProps"],"sourceRoot":""}
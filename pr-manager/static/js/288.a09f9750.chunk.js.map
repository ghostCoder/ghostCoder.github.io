{"version":3,"file":"static/js/288.a09f9750.chunk.js","mappings":"8OAEO,MAAMA,GAAwCC,E,QAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,k2B,uBCWjD,MAAMC,EAAkBA,KAE7B,MAAM,QAAEC,EAAO,OAAEC,IAAWC,EAAAA,EAAAA,YAAWC,EAAAA,KACjC,cAAEC,IAAkBF,EAAAA,EAAAA,YAAWG,EAAAA,KAC9BC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAkB,GAE1D,WACE,IACE,MAAMC,QAAiBC,EAAAA,EAAAA,KACvBC,QAAQC,IAAI,yBAA0BH,EACxC,CAAE,MAAOI,GACPF,QAAQC,IAAI,iCAAkCC,GAC1CC,OAAOD,GAAOE,WAAW,+BACN,IAAjBT,GACFC,GAAgB,GAGlBH,GAAc,EAElB,CACD,EAdD,GAgBA,MACEY,KAAMC,EAAe,MACrBJ,EAAK,QACLK,IACEC,EAAAA,EAAAA,GAASxB,EAAyB,CACpCyB,UAAW,CACTpB,QAASA,EAAQqB,KAAKC,GAAWA,EAAOC,YAE1CC,YAAa,eACbC,gBAAiB,sBAGnBd,QAAQC,IAAI,sBAAuBK,EAAiBJ,EAAOK,GAE3D,MAAMF,GAAOU,EAAAA,EAAAA,UACX,IACiB,OAAfT,QAAe,IAAfA,OAAe,EAAfA,EAAiBU,MAAMC,MAAMC,QAAO,CAACC,EAAWC,KAC9CD,EAAIE,QAAQD,EAAKE,sBAAsBL,OAChCE,IACN,KACL,CAACb,IAGH,OAAIX,GAEA4B,EAAAA,EAAAA,KAACC,EAAAA,MAAK,CACJC,aAAa,yEACbnC,OAAQA,IAKViB,GACKgB,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAACC,YAAY,kCAI1BzB,IACDsB,EAAAA,MAAoBrB,OAAOD,SAGjB0B,IAATvB,GACFZ,GAAc,GACP,OAEA8B,EAAAA,EAAAA,KAACM,EAAAA,EAAO,CAACxB,KAAMA,EAAMyB,QAASC,EAAAA,GAASC,kBAChD,C","sources":["utilities/prQueries/QUERY_GROUPS_MERGED_PRS.ts","components/prTabs/tabs/GroupsMergedPRs.tsx"],"sourcesContent":["import { DocumentNode, gql } from \"@apollo/client\";\n\nexport const QUERY_GROUPS_MERGED_PRS: DocumentNode = gql`\n  query AllMembersPRs($members: [String!]!) {\n    users(usernames: $members) {\n      nodes {\n        authoredMergeRequests(state: merged, first: 20) {\n          nodes {\n            id\n            author {\n              username\n              name\n            }\n            title\n            webUrl\n            reviewers {\n              nodes {\n                username\n                name\n              }\n            }\n            labels {\n              nodes {\n                title\n              }\n            }\n            approvedBy {\n              nodes {\n                name\n                username\n              }\n            }\n            project {\n              fullPath\n            }\n            iid\n            headPipeline {\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import { useMemo, useContext, useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { Loading } from \"../../Loading\";\nimport { Error } from \"../../Error\";\nimport { AddData } from \"./AddData\";\nimport { validateGitLabToken } from \"../../../utilities/tokenValidationUtilities/validateGitLabToken\";\nimport {\n  MembersContext,\n  TokensInCacheContext,\n} from \"../../../contexts/Context\";\nimport { QUERY_GROUPS_MERGED_PRS } from \"../../../utilities/prQueries/QUERY_GROUPS_MERGED_PRS\";\nimport { MemberPR, PR, TAB_TYPE } from \"../../../utilities/constants\";\n\nexport const GroupsMergedPRs = () => {\n  // CHANGE THIS IN PROD\n  const { members, reload } = useContext(MembersContext);\n  const { setGitInCache } = useContext(TokensInCacheContext);\n  const [networkError, setNetworkError] = useState<boolean>(false);\n\n  (async () => {\n    try {\n      const response = await validateGitLabToken();\n      console.log(\"GitLab PAT validated: \", response);\n    } catch (error) {\n      console.log(\"GitLab PAT validation failed: \", error);\n      if (String(error).startsWith(\"TypeError: Failed to fetch\")) {\n        if (networkError === false) {\n          setNetworkError(true);\n        }\n      } else {\n        setGitInCache(false);\n      }\n    }\n  })();\n\n  const {\n    data: unFlattenedData,\n    error,\n    loading,\n  } = useQuery(QUERY_GROUPS_MERGED_PRS, {\n    variables: {\n      members: members.map((member) => member.username),\n    },\n    fetchPolicy: \"network-only\",\n    nextFetchPolicy: \"cache-and-network\",\n  });\n\n  console.log(\"GORUPS MERGED PRS: \", unFlattenedData, error, loading);\n\n  const data = useMemo(\n    () =>\n      unFlattenedData?.users.nodes.reduce((acc: PR[], user: MemberPR) => {\n        acc.push(...user.authoredMergeRequests.nodes);\n        return acc;\n      }, []),\n    [unFlattenedData]\n  );\n\n  if (networkError) {\n    return (\n      <Error\n        errorMessage=\"Failed to fetch: offline or your network doesn't have access to GitLab\"\n        reload={reload}\n      />\n    );\n  }\n\n  if (loading) {\n    return <Loading loadingText=\"Fetching PR's from GitLab...\" />;\n  }\n\n  // ADD ERROR SCREEN HERE\n  if (error) {\n    <Error errorMessage={String(error)} reload={reload} />;\n  }\n\n  if (data === undefined) {\n    setGitInCache(false);\n    return null;\n  } else {\n    return <AddData data={data} tabType={TAB_TYPE.groupsMergedPRs} />;\n  }\n};\n"],"names":["QUERY_GROUPS_MERGED_PRS","gql","_templateObject","_taggedTemplateLiteral","GroupsMergedPRs","members","reload","useContext","MembersContext","setGitInCache","TokensInCacheContext","networkError","setNetworkError","useState","response","validateGitLabToken","console","log","error","String","startsWith","data","unFlattenedData","loading","useQuery","variables","map","member","username","fetchPolicy","nextFetchPolicy","useMemo","users","nodes","reduce","acc","user","push","authoredMergeRequests","_jsx","Error","errorMessage","Loading","loadingText","undefined","AddData","tabType","TAB_TYPE","groupsMergedPRs"],"sourceRoot":""}
{"version":3,"file":"static/js/308.78b2e38e.chunk.js","mappings":"sMAEO,MAAMA,GAA6BC,E,QAAAA,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,u2B,iCCStC,MAAMC,EAAQA,KACnB,MAAM,KAAEC,EAAI,OAAEC,IAAWC,EAAAA,EAAAA,YAAWC,EAAAA,KAC9B,cAAEC,IAAkBF,EAAAA,EAAAA,YAAWG,EAAAA,KAC9BC,EAAcC,IAAmBC,EAAAA,EAAAA,WAAkB,GAE1D,WACE,IACE,MAAMC,QAAiBC,EAAAA,EAAAA,KACvBC,QAAQC,IAAI,yBAA0BH,EACxC,CAAE,MAAOI,GACPF,QAAQC,IAAI,iCAAkCC,GAC1CC,OAAOD,GAAOE,WAAW,+BACN,IAAjBT,GACFC,GAAgB,GAGlBH,GAAe,EAEnB,CACD,EAdD,GAgBA,MAAM,KAAEY,EAAI,MAAEH,EAAK,QAAEI,IAAYC,EAAAA,EAAAA,GAASvB,EAAc,CACtDwB,UAAW,CAAEnB,KAAMA,GACnBoB,YAAa,eACbC,gBAAiB,sBAGbC,EAAQC,EAAAA,MAAW,IACvB,uCAAsBC,MAAMC,IAAM,CAChCC,QAASD,EAAOH,YAIpB,GAAIhB,EACF,OACEqB,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,UAAUF,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAACC,YAAY,KAAMC,UAC7CL,EAAAA,EAAAA,KAACL,EAAK,CACJW,aAAa,yEACbhC,OAAQA,MAMhB,GAAIgB,EACF,OAAOU,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAACC,YAAY,iCAY9B,GARIlB,IACDe,EAAAA,SAAoBE,EAAAA,EACEhB,OAAOD,IAIhCF,QAAQC,IAAI,sBAAuBI,QAEtBkB,IAATlB,EAEF,OADAZ,GAAc,GACP,KACF,CACL,MAAM+B,EAAUZ,EAAAA,MAAW,IACzB,6BAAoBC,MAAMC,IAAM,CAC9BC,QAASD,EAAOU,cAIpB,OACER,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAACC,UAAUF,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CAACC,YAAY,2BAA4BC,UACnEL,EAAAA,EAAAA,KAACQ,EAAO,CACNnB,KAAMA,EAAKhB,KAAKoC,sBAAsBC,MACtCC,QAASC,EAAAA,GAASC,SAI1B,E","sources":["utilities/prQueries/QUERY_MY_PRS.ts","components/prTabs/tabs/MyPRs.tsx"],"sourcesContent":["import { DocumentNode, gql } from \"@apollo/client\";\n\nexport const QUERY_MY_PRS: DocumentNode = gql`\n  query MyPRs($user: String!) {\n    user(username: $user) {\n      authoredMergeRequests(state: opened) {\n        nodes {\n          id\n          title\n          webUrl\n          reviewers {\n            nodes {\n              username\n              name\n            }\n          }\n          assignees {\n            nodes {\n              name\n              username\n            }\n          }\n          labels {\n            nodes {\n              title\n            }\n          }\n          draft\n          conflicts\n          approvedBy {\n            nodes {\n              name\n              username\n            }\n          }\n          project {\n            fullPath\n          }\n          iid\n          autoMergeEnabled\n          approved\n          headPipeline {\n            status\n          }\n        }\n      }\n    }\n  }\n`;\n","import React, { useState, useContext, Suspense } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { Loading } from \"../../Loading\";\nimport { validateGitLabToken } from \"../../../utilities/tokenValidationUtilities/validateGitLabToken\";\nimport { QUERY_MY_PRS } from \"../../../utilities/prQueries/QUERY_MY_PRS\";\nimport { TAB_TYPE } from \"../../../utilities/constants\";\nimport {\n  MembersContext,\n  TokensInCacheContext,\n} from \"../../../contexts/Context\";\n\nexport const MyPRs = () => {\n  const { user, reload } = useContext(MembersContext);\n  const { setGitInCache } = useContext(TokensInCacheContext);\n  const [networkError, setNetworkError] = useState<boolean>(false);\n\n  (async () => {\n    try {\n      const response = await validateGitLabToken();\n      console.log(\"GitLab PAT validated: \", response);\n    } catch (error) {\n      console.log(\"GitLab PAT validation failed: \", error);\n      if (String(error).startsWith(\"TypeError: Failed to fetch\")) {\n        if (networkError === false) {\n          setNetworkError(true);\n        }\n      } else {\n        setGitInCache!(false);\n      }\n    }\n  })();\n\n  const { data, error, loading } = useQuery(QUERY_MY_PRS, {\n    variables: { user: user! },\n    fetchPolicy: \"network-only\",\n    nextFetchPolicy: \"cache-and-network\",\n  });\n\n  const Error = React.lazy(() =>\n    import(\"../../Error\").then((module) => ({\n      default: module.Error,\n    }))\n  );\n\n  if (networkError) {\n    return (\n      <Suspense fallback={<Loading loadingText=\"\" />}>\n        <Error\n          errorMessage=\"Failed to fetch: offline or your network doesn't have access to GitLab\"\n          reload={reload!}\n        />\n      </Suspense>\n    );\n  }\n\n  if (loading) {\n    return <Loading loadingText=\"Fetching PR's from GitLab...\" />;\n  }\n\n  // ADD ERROR SCREEN HERE\n  if (error) {\n    <Suspense fallback={<Loading loadingText=\"\" />}>\n      <Error errorMessage={String(error)} reload={reload} />\n    </Suspense>;\n  }\n\n  console.log(\"Data from My Pr's: \", data);\n\n  if (data === undefined) {\n    setGitInCache(false);\n    return null;\n  } else {\n    const AddData = React.lazy(() =>\n      import(\"./AddData\").then((module) => ({\n        default: module.AddData,\n      }))\n    );\n\n    return (\n      <Suspense fallback={<Loading loadingText=\"Loading My PR's tab...\" />}>\n        <AddData\n          data={data.user.authoredMergeRequests.nodes}\n          tabType={TAB_TYPE.myPRs}\n        />\n      </Suspense>\n    );\n  }\n};\n"],"names":["QUERY_MY_PRS","gql","_templateObject","_taggedTemplateLiteral","MyPRs","user","reload","useContext","MembersContext","setGitInCache","TokensInCacheContext","networkError","setNetworkError","useState","response","validateGitLabToken","console","log","error","String","startsWith","data","loading","useQuery","variables","fetchPolicy","nextFetchPolicy","Error","React","then","module","default","_jsx","Suspense","fallback","Loading","loadingText","children","errorMessage","undefined","AddData","authoredMergeRequests","nodes","tabType","TAB_TYPE","myPRs"],"sourceRoot":""}